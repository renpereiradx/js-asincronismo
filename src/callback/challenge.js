/*
  Primero debemos declarar e importar el paquete de XMLHttpRequest, que nos permite utilizar objetos (XHR) para interactuar con servidores (en este caso la API de Platzi) para esto hacemos:
*/
const XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
/*
  Lo que hace aqu√≠ ‚Äúrequire()‚Äù es importar el m√≥dulo del id que le pasemos, adem√°s puede importar JSON y archivos locales.
  Pero necesitamos trabajar con XMLHttpRequest para manipular la API.
*/
const API = "https://api.escuelajs.co/api/v1";
const DONE = 4;
const OK = 200;

function fetchData(urlApi, callback) {
  /*
    El par√°metro ‚ÄòurlApi‚Äô hace referencia a cualquier API con la cu√°l estemos trabajando, en este caso la FakeStore de Platzi.
    El segundo par√°metro ‚Äòcallback‚Äô es donde posteriormente vamos a pasar una funci√≥n como argumento para poder controlar el flujo de informaci√≥n de la API.
    Necesitamos alguna manera de poder manipular las solicitudes que haremos para consultar los datos, para ello vamos a crear un espacio en memoria (una variable) en donde guardar el objeto (XHR) que importamos y gracias a los m√©todos ya constru√≠dos nos ser√° mil veces m√°s f√°cil desarrollar nuestra func√≠on.
  */ 
  let xhttp = new XMLHttpRequest();
  /*
    Muy bien, ya podemos utilizar nuestra variable ‚Äòxhttp‚Äô (en conjunto al callback) como un objeto para acceder y manipular la API.
    Primero debemos abrir una solicitud (un request) esto lo hacemos con el m√©todo ‚Äò.open()‚Äô
  */
  xhttp.open("GET", urlApi, true);
  /*
    Ahora bien el primer par√°metro es el tipo de solicitud que vamos a realizar, pudo haber sido ‚ÄúPOST‚Äù, ‚ÄúPUT‚Äù, ‚ÄúDELETE‚Äù.
    Pero vamos a utilizar ‚ÄúGET‚Äù üòé
    El segundo par√°metro es la url de la API a la cu√°l le vamos a realizar el request.
    √öltimo y tercer par√°metro recibe un booleano para indicarle si vamos a utilizar as√≠ncronismo o no, tal simple como TRUE o FALSE seg√∫n el caso.
  */
 /*
  Vamos a hacer una funci√≥n an√≥nima para verificar que el request de los datos ha salido con √©xito y en caso de un tener error hacer registro de √©ste.
  Para ello nos vamos a apoyar de la propiedad de ‚Äò.onreadystatechange‚Äô √©sta llamar√° a la funci√≥n cada que el readyState cambie (readyState retorna el n√∫mero del estado en d√≥nde se encuentra el request)
 */
  xhttp.onreadystatechange = (event) => {
    if (xhttp.readyState === DONE) {
      /*
        Una vez completado con √©xito necesitamos saber que tipo de respuesta nos entreg√≥ el servidor, as√≠ que volvemos a verificar con un ‚Äô if ‚Äô la propiedad ‚Äò.status‚Äô seg√∫n el tipo de respuestas:
      */
      if (xhttp.status === OK) {
        /*
          ¬°Ya comprobamos que tanto el request como el response hayan sido exitosos! Ahora podemos invocar nuestro callback (funci√≥n por definir m√°s tarde para manipular los datos)
        */
        callback(null, JSON.parse(xhttp.responseText));
        /*
          El primero vamos a utilizarlo en caso de que se presente un error, pero como ya hemos verificado eso podemos simplemente dejarlo como un ‚Äònull‚Äô.En el segundo usamos la funci√≥n ‚ÄòJSON.parse()‚Äô para convertir en datos que podamos controlar el texto que nos retorna la propiedad ‚Äò.responseText‚Äô despu√©s de hacer el request.
        */
      }
    } else {
      /*
         en caso de haber un error registrarlo y enviarlo al callback (donde antes habiamos puesto ‚Äònull‚Äô) y ahora pasar el null en la parte de los datos, ya que nunca pudo consultarlos.
      */
      const error = new Error("Error", urlApi);
      return callback(error, null);
    }
  };
  /*
    Ya solo resta utilizar el m√©todo ‚Äò.send()‚Äô despu√©s de procesar los datos para enviar el request al server (API)
  */
  xhttp.send();
}

/*
  //se invoca el metodo fetchData() pasandole como argumentos la varible API concatenada con la cadena 'products' para acceder a la URL de la API deseada, y una funci√≥n an√≥nima que recibe 2 par√°metros (un objeto de error y un arreglo que almacena todos los objetos traidos por la API).
*/
fetchData(`${API}/products`, (error1, data1) => {
  //se valida si existe un error, en caso de que exista se detiene el proceso y se imprime el error.
  if (error1) return console.error(error1);
  /*
    se invoca nuevamente la funci√≥n fetchData con el fin de acceder a un objeto puntual del arreglo data1, se envia como par√°metros la url de la API apuntando al atributo del primer objeto de arreglo data1 y nuevamente una funci√≥n an√≥nima.
  */
  fetchData(`${API}/products/${data1[0].id}`, (error2, data2) => {
    //si en este punto se identifica un error se imprime en consola y se detiene el proceso
    if (error2) return console.error(error2);
    /*
       Se invoca nuevamente la funcion fetchData con el fin de acceder a la categoria, se env√≠an como parametros la url de la API con la concatenaci√≥n de 'Categories' y el atributo Id de categoria del objeto data2 de la funci√≥n anterior
        //en este caso puntual se hace uso de Optional Caining el cual hace una evalucaci√≥n de las propiedades de un objeto y en vez de arrojar un error devuelve undefined en caso que la propiedad no exista o sea null.
        //igual que las anteriores e envia una funcion anonima con 2 argumentos, un objeto Error y un objeto de datos
    */
    fetchData(`${API}/categories/${data2?.category?.id}`, (error3, data3) => {
      //se valida si existe error, en caso de que exista se detiene el proceso y se imprime el error
      if (error3) return console.error(error3);
       //Se imprime el objeto en la posici√≥n 1 del arreglo de los objetos obtenidos en el metodo invocado inicialmente
      console.log(data1[0]);
       //Se imprime el titulo del objeto que se consult√≥ en la seguna invocaci√≥n de la funci√≥n
      console.log(data2.title);
        //Se imprime el nombre de la categoria a la que pertenece el objeto que se consult√≥ en la seguna invocaci√≥n del m√©todo.
      console.log(data3.name);
    });
  });
});
